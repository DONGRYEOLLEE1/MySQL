CREATE TABLE Book (
bookid INTEGER PRIMARY KEY,
bookname VARCHAR(40),
publisher VARCHAR(40),
price INTEGER
);
CREATE TABLE Customer(
custid INTEGER PRIMARY KEY,
name VARCHAR(40),
address VARCHAR(50),
phone VARCHAR(20)
);
CREATE TABLE Orders(
orderid INTEGER PRIMARY KEY,
custid INTEGER,
bookid INTEGER,
saleprice INTEGER,
orderdate DATE,
FOREIGN KEY (custid) REFERENCES Customer(custid),
FOREIGN KEY (bookid) REFERENCES Book(bookid)
);
INSERT INTO Book VALUES(1, '축구의 역사', '굿스포츠', 7000);
INSERT INTO Book VALUES(2, '축구아는 여자', '나무수', 13000);
INSERT INTO Book VALUES(3, '축구의 이해', '대한미디어', 22000);
INSERT INTO Book VALUES(4, '골프 바이블', '대한미디어', 35000);
INSERT INTO Book VALUES(5, '피겨 교본', '굿스포츠', 8000);
INSERT INTO Book VALUES(6, '역도 단계별기술', '굿스포츠', 6000);
INSERT INTO Book VALUES(7, '야구의 추억', '이상미디어', 20000);
INSERT INTO Book VALUES(8, '야구를 부탁해', '이상미디어', 13000);
INSERT INTO Book VALUES(9, '올림픽 이야기', '삼성당', 7500);
INSERT INTO Book VALUES(10, 'Olympic Champions', 'Pearson', 13000);
INSERT INTO Customer VALUES (1, '박지성', '영국 맨체스터', '000-5000-0001');
INSERT INTO Customer VALUES (2, '김연아', '대한민국 서울', '000-6000-0001');
INSERT INTO Customer VALUES (3, '장미란', '대한민국 강원도', '000-7000-0001');
INSERT INTO Customer VALUES (4, '추신수', '미국 클리블랜드', '000-8000-0001');
INSERT INTO Customer VALUES (5, '박세리', '대한민국 대전', NULL);
INSERT INTO Orders VALUES (1, 1, 1, 6000, STR_TO_DATE('2014-07-01', '%Y-%m-%d'));
INSERT INTO Orders VALUES (2, 1, 3, 21000, STR_TO_DATE('2014-07-03', '%Y-%m-%d'));
INSERT INTO Orders VALUES (3, 2, 5, 8000, STR_TO_DATE('2014-07-03', '%Y-%m-%d'));
INSERT INTO Orders VALUES (4, 3, 6, 6000, STR_TO_DATE('2014-07-04', '%Y-%m-%d'));
INSERT INTO Orders VALUES (5, 4, 7, 20000, STR_TO_DATE('2014-07-05', '%Y-%m-%d'));
INSERT INTO Orders VALUES (6, 1, 2, 12000, STR_TO_DATE('2014-07-07', '%Y-%m-%d'));
INSERT INTO Orders VALUES (7, 4, 8, 13000, STR_TO_DATE('2014-07-07', '%Y-%m-%d'));
INSERT INTO Orders VALUES (8, 3, 10, 12000, STR_TO_DATE('2014-07-08', '%Y-%m-%d'));
INSERT INTO Orders VALUES (9, 2, 10, 7000, STR_TO_DATE('2014-07-09', '%Y-%m-%d'));
INSERT INTO Orders VALUES (10, 3, 8, 13000, STR_TO_DATE('2014-07-10', '%Y-%m-%d'));


CREATE TABLE Imported_Book(
bookid INTEGER,
bookname VARCHAR(40),
publisher VARCHAR(40),
price INTEGER
);


INSERT INTO Imported_Book VALUES(21, 'Zen Golf', 'Pearson', 12000);
INSERT INTO Imported_Book VALUES(22, 'Soccer Skills', 'Human Kinetics', 15000);
commit;



# '김연아'의 phone항목 보기
select * from customer;

SELECT phone
FROM Customer
WHERE name='김연아';

## 결과값 : 
+---------------+
| phone         |
+---------------+
| 000-6000-0001 |
+---------------+
1 row in set (0.00 sec)


# '김연아', '추신수'의 phone검색 결과
select name, phone from customer where name='김연아' or name='추신수';

## 결과값 :
+--------+---------------+
| name   | phone         |
+--------+---------------+
| 김연아 | 000-6000-0001 |
| 추신수 | 000-8000-0001 |
+--------+---------------+
2 rows in set (0.00 sec)


# 도서의 이름과 출판사, 가격을 보이시오.
select price, bookname, publisher from book;

## 결과값 :
+-------+-------------------+------------+
| price | bookname          | publisher  |
+-------+-------------------+------------+
|  7000 | 축구의 역사       | 굿스포츠   |
| 13000 | 축구아는 여자     | 나무수     |
| 22000 | 축구의 이해       | 대한미디어 |
| 35000 | 골프 바이블       | 대한미디어 |
|  8000 | 피겨 교본         | 굿스포츠   |
|  6000 | 역도 단계별기술   | 굿스포츠   |
| 20000 | 야구의 추억       | 이상미디어 |
| 13000 | 야구를 부탁해     | 이상미디어 |
|  7500 | 올림픽 이야기     | 삼성당     |
| 13000 | Olympic Champions | Pearson    |
+-------+-------------------+------------+


# 중복된 항목 제외하기
selecdt DISTINCT publisher from Book;

## 결과값 :
+------------+
| publisher  |
+------------+
| 굿스포츠   |
| 나무수     |
| 대한미디어 |
| 이상미디어 |
| 삼성당     |
| Pearson    |
+------------+
6 rows in set (0.00 sec)


# book이라는 관계(표)에서 가격이 10000원 이하인 도서목록을 검색
select bookname from book where price<=10000;

## 결과값 :
+-----------------+
| bookname        |
+-----------------+
| 축구의 역사     |
| 피겨 교본       |
| 역도 단계별기술 |
| 올림픽 이야기   |
+-----------------+


# book이라는 관계(표)에서 가격이 7000원 이상 10000원 이하인 도서목록과 가격을 검색
select bookname, price from book where price>=7000 and price <=10000;
또는
select bookname, price from book where price BETWEEN 7000 and 10000;

## 결과값 :
+---------------+-------+
| bookname      | price |
+---------------+-------+
| 축구의 역사   |  8000 |
| 피겨 교본     |  8000 |
| 올림픽 이야기 |  7500 |
+---------------+-------+


# '축구'를 포함한 책 내용을 출력
select bookname, price from book where bookname LIKE '%축구%';

## 결과값 : 
+---------------+-------+
| bookname      | price |
+---------------+-------+
| 축구의 역사   |  8000 |
| 축구아는 여자 | 13000 |
| 축구의 이해   | 22000 |
+---------------+-------+


# '의'를 포함하는 책 출력
select * from book where bookname LIKE '%의%';

## 결과값 : 
+--------+-------------+------------+-------+
| bookid | bookname    | publisher  | price |
+--------+-------------+------------+-------+
|      1 | 축구의 역사 | 굿스포츠   |  8000 |
|      3 | 축구의 이해 | 대한미디어 | 22000 |
|      7 | 야구의 추억 | 이상미디어 | 20000 |
+--------+-------------+------------+-------+


# 책 제목에 '축구'라는 문구가 있고, 출판사 '대한미디어'는 제외하는 레코드 검색
SELECT * FROM Book WHERE bookname LIKE '%축구%' AND NOT publisher='대한미디어';

## 결과값 :
+--------+---------------+-----------+-------+
| bookid | bookname      | publisher | price |
+--------+---------------+-----------+-------+
|      1 | 축구의 역사   | 굿스포츠  |  8000 |
|      2 | 축구아는 여자 | 나무수    | 13000 |
+--------+---------------+-----------+-------+


# bookname을 가격순으로 정렬, 가격이 같으면 이름순으로 검색
SELECT * FROM Book ORDER BY price, bookname;

## 결과값 :
+--------+-------------------+------------+-------+
| bookid | bookname          | publisher  | price |
+--------+-------------------+------------+-------+
|      6 | 역도 단계별기술   | 굿스포츠   |  6000 |
|      9 | 올림픽 이야기     | 삼성당     |  7500 |
|      1 | 축구의 역사       | 굿스포츠   |  8000 |
|      5 | 피겨 교본         | 굿스포츠   |  8000 |
|     10 | Olympic Champions | Pearson    | 13000 |
|      8 | 야구를 부탁해     | 이상미디어 | 13000 |
|      2 | 축구아는 여자     | 나무수     | 13000 |
|      7 | 야구의 추억       | 이상미디어 | 20000 |
|      3 | 축구의 이해       | 대한미디어 | 22000 |
|      4 | 골프 바이블       | 대한미디어 | 35000 |
+--------+-------------------+------------+-------+


# 가격은 내림차순으로 검색, 만약 가격이 같다면 출판사의 오름차순으로 검색
SELECT * FROM Book ORDER BY price DESC, publisher ASC;

## 결과값 :
+--------+-------------------+------------+-------+
| bookid | bookname          | publisher  | price |
+--------+-------------------+------------+-------+
|      4 | 골프 바이블       | 대한미디어 | 35000 |
|      3 | 축구의 이해       | 대한미디어 | 22000 |
|      7 | 야구의 추억       | 이상미디어 | 20000 |
|     10 | Olympic Champions | Pearson    | 13000 |
|      2 | 축구아는 여자     | 나무수     | 13000 |
|      8 | 야구를 부탁해     | 이상미디어 | 13000 |
|      1 | 축구의 역사       | 굿스포츠   |  8000 |
|      5 | 피겨 교본         | 굿스포츠   |  8000 |
|      9 | 올림픽 이야기     | 삼성당     |  7500 |
|      6 | 역도 단계별기술   | 굿스포츠   |  6000 |
+--------+-------------------+------------+-------+


- 집계함수 'GROUP BY'

# 고객이 주문한 도서의 총 판매액을 구하라
SELECT SUM(saleprice) FROM Orders;

## 결과값 :
+----------------+
| SUM(saleprice) |
+----------------+
|         118000 |
+----------------+


# AS 키워드를 사용하여 열 이름을 부여해보기
SELECT SUM(saleprice) AS 총매출 FROM Orders;

## 결과값 :
+--------+
| 총매출 |
+--------+
| 118000 |
+--------+

# 수식활용 가능
SELECT 2*SUM(saleprice)+1 AS '총매출 예상 값' FROM Orders;

## 결과값 :
+----------------+
| 총매출 예상 값 |
+----------------+
|         236001 |
+----------------+

# 수식활용 + AS생략
SELECT SUM(saleprice)*0.4-100+1 '총매출 예상 값' FROM Orders;

## 결과값 :
+----------------+
| 총매출 예상 값 |
+----------------+
|        47101.0 |
+----------------+


# 김연아 고객이 주문한 도서의 총 구매액
SELECT SUM(saleprice) AS 총매출 FROM Orders WHERE custid=2;

## 결과값 :
+--------+
| 총매출 |
+--------+
|  15000 |
+--------+


# 고객별로 주문한 도서의 총 수량과 총 판매액을 구하라
SELECT custid, COUNT(*) AS 도서수량, SUM(saleprice) AS 총액
FROM Orders
GROUP BY custid;

## 결과값 :
+--------+----------+-------+
| custid | 도서수량 | 총액  |
+--------+----------+-------+
|      1 |        3 | 39000 |
|      2 |        2 | 15000 |
|      3 |        3 | 31000 |
|      4 |        2 | 33000 |
+--------+----------+-------+



- HAVING 절 (GROUP BY 절의 결과 나타나는 그룹을 제한하는 역할)

# 가격이 8000원 이상인 도서를 구매한 고객에 대해 고객별 주문 도서의 총 수량 구하기
(단, 2권 이상 구매한 고객만 구하시오)
SELECT custid, COUNT(*) AS 도서수량
    -> FROM Orders
    -> WHERE saleprice>=8000
    -> GROUP BY custid
    -> HAVING count(*)>=2;

## 결과값 :
+--------+----------+
| custid | 도서수량 |
+--------+----------+
|      1 |        2 |
|      3 |        2 |
|      4 |        2 |
+--------+----------+


- 조인 Join

# 고객과 고객의 주문에 관한 데이터를 모두 보이시오
SELECT * FROM Customer, Orders WHERE Customer.custi=Orders.custid;

## 결과값 :
+--------+--------+-----------------+---------------+---------+--------+--------+-----------+------------+
| custid | name   | address         | phone         | orderid | custid | bookid | saleprice | orderdate  |
+--------+--------+-----------------+---------------+---------+--------+--------+-----------+------------+
|      1 | 박지성 | 영국 맨체스터   | 000-5000-0001 |       1 |      1 |      1 |      6000 | 2014-07-01 |
|      1 | 박지성 | 영국 맨체스터   | 000-5000-0001 |       2 |      1 |      3 |     21000 | 2014-07-03 |
|      1 | 박지성 | 영국 맨체스터   | 000-5000-0001 |       6 |      1 |      2 |     12000 | 2014-07-07 |
|      2 | 김연아 | 대한민국 서울   | 000-6000-0001 |       3 |      2 |      5 |      8000 | 2014-07-03 |
|      2 | 김연아 | 대한민국 서울   | 000-6000-0001 |       9 |      2 |     10 |      7000 | 2014-07-09 |
|      3 | 장미란 | 대한민국 강원도 | 000-7000-0001 |       4 |      3 |      6 |      6000 | 2014-07-04 |
|      3 | 장미란 | 대한민국 강원도 | 000-7000-0001 |       8 |      3 |     10 |     12000 | 2014-07-08 |
|      3 | 장미란 | 대한민국 강원도 | 000-7000-0001 |      10 |      3 |      8 |     13000 | 2014-07-10 |
|      4 | 추신수 | 미국 클리블랜드 | 000-8000-0001 |       5 |      4 |      7 |     20000 | 2014-07-05 |
|      4 | 추신수 | 미국 클리블랜드 | 000-8000-0001 |       7 |      4 |      8 |     13000 | 2014-07-07 |
+--------+--------+-----------------+---------------+---------+--------+--------+-----------+------------+


# 고객과 고객의 주문에 관한 데이터를 고객별로 정렬하라
SELECT * FROM Customer, Orders WHERE Customer.custid=Orders.custid ORDER BY Customer.custid;

## 결과값 :
+--------+--------+-----------------+---------------+---------+--------+--------+-----------+------------+
| custid | name   | address         | phone         | orderid | custid | bookid | saleprice | orderdate  |
+--------+--------+-----------------+---------------+---------+--------+--------+-----------+------------+
|      1 | 박지성 | 영국 맨체스터   | 000-5000-0001 |       1 |      1 |      1 |      6000 | 2014-07-01 |
|      1 | 박지성 | 영국 맨체스터   | 000-5000-0001 |       2 |      1 |      3 |     21000 | 2014-07-03 |
|      1 | 박지성 | 영국 맨체스터   | 000-5000-0001 |       6 |      1 |      2 |     12000 | 2014-07-07 |
|      2 | 김연아 | 대한민국 서울   | 000-6000-0001 |       3 |      2 |      5 |      8000 | 2014-07-03 |
|      2 | 김연아 | 대한민국 서울   | 000-6000-0001 |       9 |      2 |     10 |      7000 | 2014-07-09 |
|      3 | 장미란 | 대한민국 강원도 | 000-7000-0001 |       4 |      3 |      6 |      6000 | 2014-07-04 |
|      3 | 장미란 | 대한민국 강원도 | 000-7000-0001 |       8 |      3 |     10 |     12000 | 2014-07-08 |
|      3 | 장미란 | 대한민국 강원도 | 000-7000-0001 |      10 |      3 |      8 |     13000 | 2014-07-10 |
|      4 | 추신수 | 미국 클리블랜드 | 000-8000-0001 |       5 |      4 |      7 |     20000 | 2014-07-05 |
|      4 | 추신수 | 미국 클리블랜드 | 000-8000-0001 |       7 |      4 |      8 |     13000 | 2014-07-07 |
+--------+--------+-----------------+---------------+---------+--------+--------+-----------+------------+


# 고객의 이름과 고객이 주문한 도서의 판매가격을 검색하라
SELECT name, saleprice FROM Customer, Orders WHERE Customer.custid=Orders.custid;


## 결과값 :
+--------+-----------+
| name   | saleprice |
+--------+-----------+
| 박지성 |      6000 |
| 박지성 |     21000 |
| 박지성 |     12000 |
| 김연아 |      8000 |
| 김연아 |      7000 |
| 장미란 |      6000 |
| 장미란 |     12000 |
| 장미란 |     13000 |
| 추신수 |     20000 |
| 추신수 |     13000 |
+--------+-----------+


# 고객별로 주문한 모든 도서의 총 판매액을 구하고, 고객별로 정렬하라
SELECT name, SUM(saleprice)
FROM Customer, Orders
WHERE Customer.custid=Orders.custid
GROUP BY Customer.name
ORDER BY Customer.name;

## 결과값 :
+--------+----------------+
| name   | SUM(saleprice) |
+--------+----------------+
| 김연아 |          15000 |
| 박지성 |          39000 |
| 장미란 |          31000 |
| 추신수 |          33000 |
+--------+----------------+


# 고객의 이름과 고객이 주문한 도서의 이름을 구하라
SELECT Customer.name, book.bookname
FROM Customer, Book, Orders
WHERE Customer.custid=Orders.custid AND Orders.bookid=Book.bookid;

## 결과값 :
+--------+-------------------+
| name   | bookname          |
+--------+-------------------+
| 박지성 | 축구의 역사       |
| 박지성 | 축구의 이해       |
| 김연아 | 피겨 교본         |
| 장미란 | 역도 단계별기술   |
| 추신수 | 야구의 추억       |
| 박지성 | 축구아는 여자     |
| 추신수 | 야구를 부탁해     |
| 장미란 | Olympic Champions |
| 김연아 | Olympic Champions |
| 장미란 | 야구를 부탁해     |
+--------+-------------------+


# 가격이 20,000원인 도서를 주문한 고객의 이름과 도서의 이름을 구하라
SELECT Customer.name, book.bookname
FROM Customer, Book, Orders
WHERE Customer.custid=Orders.custid AND Orders.bookid=Book.bookid AND price>=20000;

## 결과값 : 
+--------+-------------+
| name   | bookname    |
+--------+-------------+
| 박지성 | 축구의 이해 |
| 추신수 | 야구의 추억 |
+--------+-------------+


# 도서를 구매하지 않은 고객을 포함하여 고객의 이름과 고객이 주문한 도서의 판매가격을 구하라
SELECT Customer.name, saleprice
FROM Customer LEFT JOIN Orders ON Customer.custid=Orders.custid;

## 결과값 :
+--------+-----------+
| name   | saleprice |
+--------+-----------+
| 박지성 |      6000 |
| 박지성 |     21000 |
| 박지성 |     12000 |
| 김연아 |      8000 |
| 김연아 |      7000 |
| 장미란 |      6000 |
| 장미란 |     12000 |
| 장미란 |     13000 |
| 추신수 |     20000 |
| 추신수 |     13000 |
| 박세리 |      NULL |
+--------+-----------+


# 가장 비싼 도서의 이름을 보여라
SELECT bookname FROM Book WHERE price=(SELECT MAX(price) FROM Book);

## 결과값 :
+-------------+
| bookname    |
+-------------+
| 골프 바이블 |
+-------------+


# 도서를 구매한 적이 있는 고객의 이름을 검색하라
SELECT name
FROM Customer
WHERE custid IN (SELECT custid FROM Orders);


# 대한미디어에서 출판한 도서를 구매한 고객의 이름을 구하라
SELECT name
FROM Customer
WHERE custid IN(SELECT

## 순서
SELECT bookid
SELECT custid
SELECT name


# 대한민국에 거주하는 고객의 이름
SELECT name
FROM Customer
WHERE address = '%대한민국%';
# 도서를 주문한 고객
SELECT name
FROM Customer
WHERE custid IN (SELECT custid FROM Orders);

# 대한민국에 거주하는 고객의 이름과 도서를 주문한 고객의 이름을 구하라
SELECT name
FROM Customer
WHERE address LIKE '대한민국%'
UNION
SELECT name
FROM Customer
WHERE custid IN (SELECT custid FROM Orders);

## 결과값 :
+--------+
| name   |
+--------+
| 김연아 |
| 장미란 |
| 박세리 |
| 박지성 |
| 추신수 |
+--------+

# 대한민국에서 거주하는 고객의 이름에서 도서를 주문한 고객의 이름 빼고 보여라 [차집합]
SELECT name
FROM Customer
SELECT name
    -> FROM Customer
    -> WHERE address LIKE '대한민국%' AND name NOT IN (SELECT name FROM Customer WHERE custid IN (SELECT custid FROM Orders));

## 결과값 :
+--------+
| name   |
+--------+
| 박세리 |
+--------+

# 대한민국에서 거주하는 고객 중 도서를 주문한 고객의 이름을 보여라 [교집합]
SELECT name
    -> FROM Customer
    -> WHERE address LIKE '대한민국%' AND name IN (SELECT name FROM Customer WHERE custid IN (SELECT custid FROM Orders));

## 결과값 :
+--------+
| name   |
+--------+
| 김연아 |
| 장미란 |
+--------+




- p.199 연습문제

1.1 도서번호가 1인 도서의 이름
SELECT bookname
    -> FROM book
    -> WHERE bookid=1;
+-------------+
| bookname    |
+-------------+
| 축구의 역사 |
+-------------+

1.2 가격이 20,000원 이상인 도서의 이름
SELECT bookname
    -> FROM book
    -> WHERE price >=20000;
+-------------+
| bookname    |
+-------------+
| 축구의 이해 |
| 골프 바이블 |
| 야구의 추억 |
+-------------+

1.3 박지성의 총 구매액
SELECT SUM(saleprice)
    -> FROM Customer, Orders
    -> WHERE Customer.custid=Orders.custid AND Customer.name='박지성';
+----------------+
| SUM(saleprice) |
+----------------+
|          39000 |
+----------------+

1.4 박지성이 구매한 도서의 수
SELECT COUNT(*)
    -> FROM Customer, Orders
    -> WHERE Customer.custid=Orders.custid AND Customer.name LIKE '박지성';
+----------+
| COUNT(*) |
+----------+
|        3 |
+----------+


1.5 박지성이 구매한 도서의 출판사 수
 SELECT COUNT(DISTINCT publisher) AS '출판사수'
    -> FROM Customer, Orders, Book
    -> WHERE Customer.custid=Orders.custid AND Orders.bookid=Book.bookid
    -> AND Customer.name =  '박지성';
+----------------------------------+
| 박지성이 구매한 도서의 출판사 수 |
+----------------------------------+
|                                3 |
+----------------------------------+

1.6 박지성이 구매한 도서의 이름, 가격, 정가와 판매가격의 차이
SELECT bookname, price, price-saleprice
    -> FROM Book, Orders
    -> WHERE book.bookid=Orders.bookid AND custid=1;
또는
SELECT bookname, price, price-saleprice
    -> FROM Customer, Orders, Book
    -> WHERE Customer.custid=Orders.custid AND Orders.bookid=Book.bookid
    -> AND Customer.name = '박지성';
+---------------+-------+-----------------+
| bookname      | price | price-saleprice |
+---------------+-------+-----------------+
| 축구의 역사   |  8000 |            2000 |
| 축구의 이해   | 22000 |            1000 |
| 축구아는 여자 | 13000 |            1000 |
+---------------+-------+-----------------+


1.7 박지성이 구매하지 않은 도서의 이름






CREATE TABLE NewBook(
bookid INTEGER,
bookname VARCHAR(20),
publisher VARCHAR(20),
price INTEGER,
isbn VARCHAR(13)
);

# NEWBOOK 테이블에 VARCHAR(13)의 자료형을 가진 isbn 속성을 추가할
ALTER TABLE NewBook ADD isbn VARCHAR(13);

# NEWBOOK 테이블에 isbn속성의 데이터 타입을 INTEGER형으로 변경하라
ALTER TABLE NewBook MODIFY isbn INTEGER;

# NEWBOOK 테이블의 isbn 속성을 삭제하라
ALTER TABLE NewBook DROP COLUMN isbn;

# NewBook 테이블의 isbn 속성에 NOT NULL 제약조건을 적용시켜라
alter table newbook modify isbn VARCHAR(13) not null;

# NEWBOOK 테이블의 bookid 속성을 기본키로 변경하라
alter table newbook add primary key(bookid);

# NEWBOOK 테이블을 삭제하라
drop table newbook;

- UPDATE

# Customer 테이블에서 고객번호가 5인 고객의 주소를 '대한민국 부산'으로 변경하라
UPDATE customer SET address='대한민국 부산' where custid = 5;





CREATE TABLE NewBook(
bookname VARCHAR(20) NOT NULL,
publisher VARCHAR(20) UNIQUE,
price INTEGER,
PRIMARY KEY (bookname, publisher)
);

CREATE TABLE Orders(
orderid INTEGER PRIMARY KEY,
custid INTEGER,
bookid INTEGER,
saleprice INTEGER,
orderdate DATE,
FOREIGN KEY (custid) REFERENCES Customer(custid),
FOREIGN KEY (bookid) REFERENCES Book(bookid)
# 외래키(FOREIGN KEY)로 원본이 삭제되면 무력화됨
);





